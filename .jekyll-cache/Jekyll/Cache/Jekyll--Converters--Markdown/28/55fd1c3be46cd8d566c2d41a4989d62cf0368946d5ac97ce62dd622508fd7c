I"u4<h2 id="19-remove-nth-node-from-end-of-list">19. Remove Nth Node From End of List</h2>
<p><strong>Difficulty: medium</strong></p>

<p>Given a linked list, remove the n-th node from the end of list and return its head.</p>

<p><strong>Example:</strong></p>

<blockquote>
  <p>Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p>

  <p>After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</p>
</blockquote>

<p><strong>Note:</strong></p>

<p>Given n will always be valid.</p>

<p><strong>Follow up:</strong></p>

<p>Could you do this in one pass?</p>

<p><strong>1st Version:</strong></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">ListNode</span><span class="o">*</span> <span class="n">removeNthFromEnd</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">ListNode</span><span class="o">*&gt;</span> <span class="n">nodes</span><span class="p">;</span>
        <span class="k">auto</span> <span class="n">node</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">nodes</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="kt">int</span> <span class="n">po</span> <span class="o">=</span> <span class="n">nodes</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="n">n</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">po</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">delete</span> <span class="n">nodes</span><span class="p">[</span><span class="n">po</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">po</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">nodes</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">head</span> <span class="o">=</span> <span class="n">nodes</span><span class="p">[</span><span class="n">po</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
            <span class="k">else</span> 
                <span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">delete</span> <span class="n">nodes</span><span class="p">[</span><span class="n">po</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">po</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">nodes</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">nodes</span><span class="p">[</span><span class="n">po</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">nodes</span><span class="p">[</span><span class="n">po</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
            <span class="k">else</span>
                <span class="n">nodes</span><span class="p">[</span><span class="n">po</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>Rate:</strong><br />
Runtime: 4 ms, faster than 86.11% of C++ online submissions for Remove Nth Node From End of List.<br />
Memory Usage: 8.8 MB, less than 6.58% of C++ online submissions for Remove Nth Node From End of List.</p>

<p>真是搞不懂我是什么弱智, 为什么要这么写, 还搞一个vector来存, 这样的话直接遍历两遍不就好了.</p>

<p>重写了一下, 时间和空间其实都已经达到预期了:<br />
<strong>2nd Version:</strong></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">ListNode</span><span class="o">*</span> <span class="n">removeNthFromEnd</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">size_t</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0u</span><span class="p">;</span>
        <span class="k">auto</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">itr</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">itr</span> <span class="o">=</span> <span class="n">itr</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="o">++</span><span class="n">len</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">po</span> <span class="o">=</span> <span class="n">len</span> <span class="o">-</span> <span class="n">n</span><span class="p">;</span>
        <span class="n">itr</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">po</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="k">delete</span> <span class="n">itr</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">po</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">itr</span> <span class="o">=</span> <span class="n">itr</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">auto</span> <span class="n">newNext</span> <span class="o">=</span> <span class="n">itr</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="k">delete</span> <span class="n">itr</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">itr</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">newNext</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>Rate:</strong><br />
Runtime: 4 ms, faster than 86.11% of C++ online submissions for Remove Nth Node From End of List.<br />
Memory Usage: 8.4 MB, less than 98.68% of C++ online submissions for Remove Nth Node From End of List.</p>

<p>但是题目中叫我们挑战一遍拿到倒数第n个元素, 没经验, 想不出来.</p>

<p><strong>3rd Version (Java):</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// https://leetcode.com/problems/remove-nth-node-from-end-of-list/discuss/359826/Java-recursive-solution%3A-Runtime%3A-0-ms-faster-than-100.00-O(n)</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">findN</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">current</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
       
        <span class="k">if</span><span class="o">(</span><span class="n">current</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>    
        <span class="n">n</span> <span class="o">=</span> <span class="n">findN</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
        
        <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
            <span class="n">n</span><span class="o">--;</span>
        
        <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nc">ListNode</span> <span class="nf">removeNthFromEnd</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="kt">int</span> <span class="n">isDone</span> <span class="o">=</span> <span class="n">findN</span><span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
        
        <span class="k">if</span><span class="o">(</span><span class="n">isDone</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>奇妙的方法, 递归. 不多解释了.</p>
:ET