I"͎<p>开一个新坑, 这个坑比较短(???), 应该寒假之前就能解决, 算作是2020年的开年作了.<br />
更新, 寒假前没有完成, 寒假开头赶工. <br />
实际上又因为拖延症拖延到疫情快结束了. 这篇的原时间是 2019 年 12 月 17 日, 现在修改到今天的日期. 还算是敲门砖, 毕竟是今年开的第一个文章.</p>

<p>侧面的目录不方便, 这里再来生成一个:</p>
<ul>
  <li><a href="#1-%e8%ae%a9%e8%87%aa%e5%b7%b1%e4%b9%a0%e6%83%afc---accustoming-yourself-to-c">1. 让自己习惯C++ - Accustoming Yourself to C++</a>
    <ul>
      <li><a href="#%e6%9d%a1%e6%ac%be-01-%e8%a7%86c%e4%b8%ba%e4%b8%80%e4%b8%aa%e8%af%ad%e8%a8%80%e8%81%94%e9%82%a6---view-c-as-a-federation-of-languages">条款 01: 视C++为一个语言联邦 - View C++ as a federation of languages.</a></li>
      <li><a href="#%e6%9d%a1%e6%ac%be-02-%e5%b0%bd%e9%87%8f%e4%bb%a5const-enum-inline%e6%9b%bf%e6%8d%a2define---prefer-consts-enums-and-inlines-to-defines">条款 02: 尽量以const, enum, inline替换#define - Prefer consts, enums, and inlines to #defines.</a></li>
      <li><a href="#%e6%9d%a1%e6%ac%be-03-%e5%b0%bd%e5%8f%af%e8%83%bd%e4%bd%bf%e7%94%a8const---use-const-whenever-possible">条款 03: 尽可能使用const - Use const whenever possible.</a></li>
      <li><a href="#%e6%9d%a1%e6%ac%be-04-%e7%a1%ae%e5%ae%9a%e5%af%b9%e8%b1%a1%e8%a2%ab%e4%bd%bf%e7%94%a8%e5%89%8d%e5%b7%b2%e5%85%88%e8%a2%ab%e5%88%9d%e5%a7%8b%e5%8c%96---make-sure-that-objects-are-initialized-before-theyre-used">条款 04: 确定对象被使用前已先被初始化 - Make sure that objects are initialized before they’re used.</a></li>
    </ul>
  </li>
  <li><a href="#2-%e6%9e%84%e9%80%a0%e6%9e%90%e6%9e%84%e8%b5%8b%e5%80%bc%e8%bf%90%e7%ae%97---constructors-destructors-and-assignment-operators">2. 构造/析构/赋值运算 - Constructors, Destructors, and Assignment Operators</a>
    <ul>
      <li><a href="#%e6%9d%a1%e6%ac%be-05-%e4%ba%86%e8%a7%a3c%e9%bb%98%e9%bb%98%e7%bc%96%e5%86%99%e5%b9%b6%e8%b0%83%e7%94%a8%e5%93%aa%e4%ba%9b%e5%87%bd%e6%95%b0---know-what-functions-c-silently-writes-and-calls">条款 05: 了解C++默默编写并调用哪些函数 - Know what functions C++ silently writes and calls.</a></li>
      <li><a href="#%e6%9d%a1%e6%ac%be-06-%e8%8b%a5%e4%b8%8d%e6%83%b3%e4%bd%bf%e7%94%a8%e7%bc%96%e8%af%91%e5%99%a8%e8%87%aa%e5%8a%a8%e7%94%9f%e6%88%90%e7%9a%84%e5%87%bd%e6%95%b0-%e5%b0%b1%e8%af%a5%e6%98%8e%e7%a1%ae%e6%8b%92%e7%bb%9d---explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want">条款 06: 若不想使用编译器自动生成的函数, 就该明确拒绝 - Explicitly disallow the use of compiler-generated functions you do not want.</a></li>
      <li><a href="#%e6%9d%a1%e6%ac%be-07-%e4%b8%ba%e5%a4%9a%e6%80%81%e5%9f%ba%e7%b1%bb%e5%a3%b0%e6%98%8evirtual%e6%9e%90%e6%9e%84%e5%87%bd%e6%95%b0---declear-destructors-virtual-in-polymorphic-base-classes">条款 07: 为多态基类声明virtual析构函数 - Declear destructors virtual in polymorphic base classes.</a></li>
      <li><a href="#%e6%9d%a1%e6%ac%be-08-%e5%88%ab%e8%ae%a9%e5%bc%82%e5%b8%b8%e9%80%83%e7%a6%bb%e6%9e%90%e6%9e%84%e5%87%bd%e6%95%b0---prevent-exceptions-from-leaving-destructors">条款 08: 别让异常逃离析构函数 - Prevent exceptions from leaving destructors.</a></li>
      <li><a href="#%e6%9d%a1%e6%ac%be-09-%e7%bb%9d%e4%b8%8d%e5%9c%a8%e6%9e%84%e9%80%a0%e5%92%8c%e6%9e%90%e6%9e%84%e8%bf%87%e7%a8%8b%e4%b8%ad%e8%b0%83%e7%94%a8%e8%99%9a%e5%87%bd%e6%95%b0---never-call-virtual-functions-during-construction-or-destruction">条款 09: 绝不在构造和析构过程中调用虚函数 - Never call virtual functions during construction or destruction.</a></li>
      <li><a href="#%e6%9d%a1%e6%ac%be-10-%e4%bb%a4operator%e8%bf%94%e5%9b%9e%e4%b8%80%e4%b8%aa%e5%bc%95%e7%94%a8%e6%8c%87%e5%90%91this---have-assignment-operators-return-a-reference-to-this">条款 10: 令operator=返回一个引用指向<code class="language-plaintext highlighter-rouge">*this</code> - Have assignment operators return a reference to <code class="language-plaintext highlighter-rouge">*this</code>.</a></li>
      <li><a href="#%e6%9d%a1%e6%ac%be-11-%e5%9c%a8operator%e4%b8%ad%e5%a4%84%e7%90%86%e8%87%aa%e6%88%91%e8%b5%8b%e5%80%bc---handle-assignment-to-self-in-operator">条款 11: 在operator=中处理自我赋值 - Handle assignment to self in operator=.</a></li>
      <li><a href="#%e6%9d%a1%e6%ac%be-12-%e5%a4%8d%e5%88%b6%e5%af%b9%e8%b1%a1%e6%97%b6%e5%8b%bf%e5%bf%98%e5%85%b6%e6%af%8f%e4%b8%80%e4%b8%aa%e6%88%90%e5%88%86---copy-all-parts-of-an-object">条款 12: 复制对象时勿忘其每一个成分 - Copy all parts of an object.</a></li>
    </ul>
  </li>
  <li><a href="#3-%e8%b5%84%e6%ba%90%e7%ae%a1%e7%90%86---resource-management">3. 资源管理 - Resource Management</a>
    <ul>
      <li><a href="#%e6%9d%a1%e6%ac%be-13-%e4%bb%a5%e5%af%b9%e8%b1%a1%e7%ae%a1%e7%90%86%e8%b5%84%e6%ba%90---use-objects-to-manage-resources">条款 13. 以对象管理资源 - Use objects to manage resources.</a></li>
      <li><a href="#%e6%9d%a1%e6%ac%be-14-%e5%9c%a8%e8%b5%84%e6%ba%90%e7%ae%a1%e7%90%86%e7%b1%bb%e4%b8%ad%e5%b0%8f%e5%bf%83%e5%a4%8d%e5%88%b6%e8%a1%8c%e4%b8%ba---think-carefully-about-copying-behavior-in-resource-managing-classes">条款 14. 在资源管理类中小心复制行为 - Think carefully about copying behavior in resource-managing classes.</a></li>
    </ul>
  </li>
</ul>

<h2 id="1-让自己习惯c---accustoming-yourself-to-c">1. 让自己习惯C++ - Accustoming Yourself to C++</h2>
<h3 id="条款-01-视c为一个语言联邦---view-c-as-a-federation-of-languages">条款 01: 视C++为一个语言联邦 - View C++ as a federation of languages.</h3>
<ul>
  <li>C++如今已经是一个多重范型编程语言(multiparadigm programming language), 同时支持过程形式(procedural), 面向对象形式(object-oriented), 函数形式(functional), 泛型形式(generic), 元编程形式(metaprogramming).</li>
  <li>语言由次语言(sublanguage)组成, C++由四个次语言组成: C, Object-Oriented C++, Template C++, STL.</li>
</ul>

<h3 id="条款-02-尽量以const-enum-inline替换define---prefer-consts-enums-and-inlines-to-defines">条款 02: 尽量以const, enum, inline替换#define - Prefer consts, enums, and inlines to #defines.</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define ASPECT_RATIO 1.653
</span></code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ASPECT_RATIO</code>在编译器开始处理源码之前就被预处理器移走了, 这些符号可能不会出现在符号表(symbol table)内. 追踪相关的错误非常困难.</li>
  <li>多次使用<code class="language-plaintext highlighter-rouge">ASPECT_RATIO</code>会导致目标码(object code)出现多份1.653, 改用常量不会出现这种情况.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="n">authorName</span> <span class="o">=</span> <span class="s">"Scott Meyers"</span><span class="p">;</span>
<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">authorName</span><span class="p">(</span><span class="s">"Scott Meyers"</span><span class="p">);</span>
</code></pre></div></div>
<ul>
  <li>
    <p>使用上面的方式声明字符串常量</p>
  </li>
  <li>
    <p>宏没有域(scope)的限制, 而常量有.</p>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">GamePlayer</span> <span class="p">{</span>
<span class="nl">private:</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">NumTurns</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>   <span class="c1">// 常量声明式</span>
    <span class="kt">int</span> <span class="n">scores</span><span class="p">[</span><span class="n">NumTurns</span><span class="p">];</span>
<span class="p">};</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">GamePlayer</span><span class="o">::</span><span class="n">NumTurns</span><span class="p">;</span>      <span class="c1">// 常量定义式</span>
</code></pre></div></div>
<ul>
  <li>现代编译器不强求在实现文件中给出常量定义式.</li>
  <li>如果要对<code class="language-plaintext highlighter-rouge">NumTurns</code>取地址或因某些不正确的原因编译器坚持要看到定义式时, 就必须提供定义式.</li>
  <li>常量的初值设置可以放在声明式抑或定义式.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">GamePlayer</span> <span class="p">{</span>
<span class="nl">private:</span>
    <span class="k">enum</span> <span class="p">{</span> <span class="n">NumTurns</span> <span class="o">=</span> <span class="mi">5</span> <span class="p">};</span>     <span class="c1">// 被称作 enum hack</span>
                               <span class="c1">// 令NumTurns成为5的一个记号名称</span>
    <span class="kt">int</span> <span class="n">scores</span><span class="p">[</span><span class="n">NumTurns</span><span class="p">];</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>使用enum hack的优点像#defines, 首先取地址不合法, 其次是不可能获得其引用和指针.</li>
  <li>一个不够优秀的编译器可能会为常量分配空间, 此时常量就可能被获取引用或指针. 使用enum hack可以完全避免.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define CALL_WITH_MAX(a, b) f((a) &gt; (b) ? (a) : (b))
</span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">CALL_WITH_MAX</span><span class="p">(</span><span class="o">++</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
<span class="n">CALL_WITH_MAX</span><span class="p">(</span><span class="o">++</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">10</span><span class="p">);</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="kr">inline</span> <span class="kt">void</span> <span class="nf">callWithMax</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">f</span><span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span> <span class="o">?</span> <span class="n">a</span> <span class="o">:</span> <span class="n">b</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>宏不会招致函数调用带来的额外开销.</li>
  <li>类函数宏是不安全的. 在调用<code class="language-plaintext highlighter-rouge">f</code>之前, <code class="language-plaintext highlighter-rouge">a</code>的递增次数竟然取决于与谁比较.</li>
</ul>

<p>总结:</p>
<ul>
  <li>对于单纯变量, 最好以<code class="language-plaintext highlighter-rouge">const</code>对象或enums替换<code class="language-plaintext highlighter-rouge">#define</code>.</li>
  <li>对于形似函数的宏(macros), 最好改用inline函数替换<code class="language-plaintext highlighter-rouge">#define</code>.</li>
</ul>

<h3 id="条款-03-尽可能使用const---use-const-whenever-possible">条款 03: 尽可能使用const - Use const whenever possible.</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">greeting</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"hello"</span><span class="p">;</span>
<span class="kt">char</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">greeting</span><span class="p">;</span>              <span class="c1">// non-const pointer, non-const data</span>
<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">greeting</span><span class="p">;</span>        <span class="c1">// non-const pointer, const data</span>
<span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="n">p</span> <span class="o">=</span> <span class="n">greeting</span><span class="p">;</span>        <span class="c1">// const pointer, non-const data</span>
<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="n">p</span> <span class="o">=</span> <span class="n">greeting</span><span class="p">;</span>  <span class="c1">// const pointer, const data</span>
</code></pre></div></div>
<ul>
  <li>见注释</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">;</span>
<span class="cm">/*...*/</span>
<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">iter</span> <span class="o">=</span>    <span class="c1">// 类似 T* const</span>
    <span class="n">vec</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
<span class="o">*</span><span class="n">iter</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>                                <span class="c1">// 没问题</span>
<span class="o">++</span><span class="n">iter</span><span class="p">;</span>                                    <span class="c1">// 错误! iter是const</span>

<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">cIter</span> <span class="o">=</span>   <span class="c1">// cIter的作用像个const T*</span>
    <span class="n">vec</span><span class="p">.</span><span class="n">cbegin</span><span class="p">();</span>
<span class="o">*</span><span class="n">cIter</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>                               <span class="c1">// 错误! *cIter是const</span>
<span class="o">++</span><span class="n">cIter</span><span class="p">;</span>                                   <span class="c1">// 没问题</span>
</code></pre></div></div>
<ul>
  <li>STL的迭代器系统跟原生指针类似.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Rational</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">};</span>
<span class="k">const</span> <span class="n">Rational</span> <span class="k">operator</span><span class="o">*</span> <span class="p">(</span><span class="k">const</span> <span class="n">Rational</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">Rational</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">);</span>
</code></pre></div></div>
<ul>
  <li>譬如<code class="language-plaintext highlighter-rouge">operator*</code>这样的函数, 返回值类型使用<code class="language-plaintext highlighter-rouge">const</code>描述可以避免出现如<code class="language-plaintext highlighter-rouge">if(a * b = c)</code>这样的暴行出现.</li>
  <li>自定义类型变量的符号重载的行为, 尽量要与内置类型保持一致.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TextBlock</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="cm">/*...*/</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">[](</span><span class="n">std</span><span class="o">::</span><span class="kt">size_t</span> <span class="n">position</span><span class="p">)</span> <span class="k">const</span>
    <span class="p">{</span> <span class="k">return</span> <span class="n">text</span><span class="p">[</span><span class="n">position</span><span class="p">];</span> <span class="p">}</span>      <span class="c1">// operator[] for const对象</span>
    <span class="kt">char</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">[](</span><span class="n">std</span><span class="o">::</span><span class="kt">size_t</span> <span class="n">position</span><span class="p">)</span>
    <span class="p">{</span> <span class="k">return</span> <span class="n">text</span><span class="p">[</span><span class="n">position</span><span class="p">];</span> <span class="p">}</span>      <span class="c1">// operator[] for non-const对象</span>
<span class="nl">private:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">TextBlock</span> <span class="nf">tb</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">tb</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>                 <span class="c1">// call non-const TextBlock::operator[]</span>
<span class="k">const</span> <span class="n">TextBlock</span> <span class="nf">ctb</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ctb</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>                <span class="c1">// call const TextBlock::operator[]</span>

<span class="n">tb</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'x'</span><span class="p">;</span>                        <span class="c1">// No problem</span>
<span class="n">ctb</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'x'</span><span class="p">;</span>                       <span class="c1">// ERROR!</span>
</code></pre></div></div>
<ul>
  <li>见上面的代码和注释.</li>
  <li>我在读这段的过程中陷入了一个误区, 影响const和non-const不同结果的const成员函数, 即在函数签名式(signature)后面的那个<code class="language-plaintext highlighter-rouge">const</code>.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CTextBlock</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="cm">/*...*/</span>
    <span class="n">std</span><span class="o">::</span><span class="kt">size_t</span> <span class="n">length</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
<span class="nl">private:</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">pText</span><span class="p">;</span>
    <span class="k">mutable</span> <span class="n">std</span><span class="o">::</span><span class="kt">size_t</span> <span class="n">textLength</span><span class="p">;</span>
    <span class="k">mutable</span> <span class="kt">bool</span> <span class="n">lengthIsValid</span><span class="p">;</span>
<span class="p">};</span>
<span class="n">std</span><span class="o">::</span><span class="kt">size_t</span> <span class="n">CTextBlock</span><span class="o">::</span><span class="n">length</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">lengthIsValid</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">textLength</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">strlen</span><span class="p">(</span><span class="n">pText</span><span class="p">);</span>
        <span class="n">lengthIsValid</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">textLength</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>这段介绍了两个概念bitwise constness和logical constness, 见P21. 在这里精简了没有给出代码.
    <ul>
      <li>bitwise constness指成员函数只有在不更改对象的任何成员变量(静态成员除外)时才可以说是const.</li>
      <li>logical constness主张一个<code class="language-plaintext highlighter-rouge">const</code>成员函数可以修改它所处理的对象内的某些部分.</li>
    </ul>
  </li>
  <li>如果需要在const成员函数中修改成员的值, 需要使用mutable关键字进行修饰.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Textblcok</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="cm">/*...*/</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">[](</span><span class="n">std</span><span class="o">::</span><span class="kt">size_t</span> <span class="n">position</span><span class="p">)</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="cm">/*...*/</span>     <span class="c1">// 边界检测 (bounds checking)</span>
        <span class="cm">/*...*/</span>     <span class="c1">// 志记数据访问 (log access data)</span>
        <span class="cm">/*...*/</span>     <span class="c1">// 检验数据完整性 (verify data integrity)</span>
        <span class="k">return</span> <span class="n">text</span><span class="p">[</span><span class="n">postion</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="kt">char</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">[](</span><span class="n">std</span><span class="o">::</span><span class="kt">size_t</span> <span class="n">postion</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> 
          <span class="k">const_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&amp;&gt;</span><span class="p">(</span>
            <span class="k">static_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">TextBlock</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">)</span>
                <span class="p">[</span><span class="n">position</span><span class="p">]</span>
          <span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>可以看出, operator[]的其中一个版本中加入了一下额外的功能. 为了防止两个版本的实现重复(可能会伴随编译时间, 维护, 代码膨胀等一系列让人头疼的问题), 这里采用的方法是 – 用operator[]去调用另外一个operator[].</li>
  <li>这里面使用的关键性技术是类型转换那一部分, 也就是常量性移除(casting away constness).</li>
  <li>const成员函数承诺绝不改变其对象的逻辑状态(logical state). 这就是本例为什么不通过const版本调用non-const的原因, 这样会导致其对象的逻辑状态改变.</li>
</ul>

<p>总结:</p>
<ul>
  <li>将某些东西声明为<code class="language-plaintext highlighter-rouge">const</code>可以帮助编译器侦测错误用法. <code class="language-plaintext highlighter-rouge">const</code>可被施加于任何作用域内的对象, 函数参数, 函数返回类型, 成员函数本体.</li>
  <li>编译器强制实施bitwise constness, 但你编写程序时应该使用”概念上的常量性”(conceptual constness).</li>
  <li>当<code class="language-plaintext highlighter-rouge">const</code>和non-<code class="language-plaintext highlighter-rouge">const</code>成员函数有着实质等价的实现时, 令non-<code class="language-plaintext highlighter-rouge">const</code>版本调用<code class="language-plaintext highlighter-rouge">const</code>版本可避免代码重复</li>
</ul>

<h3 id="条款-04-确定对象被使用前已先被初始化---make-sure-that-objects-are-initialized-before-theyre-used">条款 04: 确定对象被使用前已先被初始化 - Make sure that objects are initialized before they’re used.</h3>
<ul>
  <li>读取未初始化的值是UB.</li>
  <li>“对象的初始化动作何时一定发生, 何时不一定发生”的规则非常复杂. 最佳的处理方式是: 永远在使用变量之前先将它初始化.
    <ul>
      <li>对于无任何成员的内置类型, 必须手工完成, 不论是手工初始化, 还是使用input stream完成初始化.</li>
      <li>内置类型外的任何其他东西, 初始化的责任落在构造函数(constructors)身上. 需确保每一个构造函数都将对象的每一个成员初始化.</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PhoneNumber</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">};</span>
<span class="k">class</span> <span class="nc">ABEntry</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">ABEntry</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">address</span><span class="p">,</span>
            <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;&amp;</span> <span class="n">phones</span><span class="p">);</span>
<span class="nl">private:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">theName</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">theAddress</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="n">thePhones</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">numTimesConsulted</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// Version 1</span>
<span class="n">ABEntry</span><span class="o">::</span><span class="n">ABEntry</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">address</span><span class="p">,</span>
                 <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;&amp;</span> <span class="n">phones</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">theName</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>           <span class="c1">// 这些都是赋值(assignments)</span>
    <span class="n">theAddress</span> <span class="o">=</span> <span class="n">address</span><span class="p">;</span>
    <span class="n">thePhones</span> <span class="o">=</span> <span class="n">phones</span><span class="p">;</span>
    <span class="n">numTimesConsulted</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Version 2</span>
<span class="n">ABEntry</span><span class="o">::</span><span class="n">ABEntry</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">address</span><span class="p">,</span>
                 <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;&amp;</span> <span class="n">phones</span><span class="p">)</span>
   <span class="o">:</span><span class="n">theName</span><span class="p">(</span><span class="n">name</span><span class="p">),</span>            <span class="c1">// 这些都是初始化(initializations)</span>
    <span class="n">theAddress</span><span class="p">(</span><span class="n">address</span><span class="p">),</span>
    <span class="n">thePhones</span><span class="p">(</span><span class="n">phones</span><span class="p">),</span>
    <span class="n">numTimesConsulted</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>上例提供了两个版本的构造函数. 第一种并不是初始化, 而是赋值.</li>
  <li>C++规定, 对象的成员变量的初始化动作发生在进入构造函数本体之前. 即, <code class="language-plaintext highlighter-rouge">theName</code>, <code class="language-plaintext highlighter-rouge">theAddress</code>, <code class="language-plaintext highlighter-rouge">thePhones</code>在进入构造函数之前就已经被调用了它们的默认构造函数. 但因为<code class="language-plaintext highlighter-rouge">numTimesConsulted</code>是内置类型, 不能保证在赋值操作之前已经获得了初值.</li>
  <li>第二个版本的写法是member initialzation list(成员初值列). 相较于第一个版本的, 第二个版本直接调用了<code class="language-plaintext highlighter-rouge">theName</code>, <code class="language-plaintext highlighter-rouge">theAddress</code>, <code class="language-plaintext highlighter-rouge">thePhones</code>的拷贝构造函数, 而非先调用它们的默认构造函数, 再对它们进行赋值. 第一个版本的默认构造函数被浪费了.</li>
</ul>

<p><em>我一直很喜欢用的使用一个private成员函数包含所有成员的赋值操作, 为(wei2)所有构造器调用的方法, 在书中被叫做”伪初始化”(pseudo-initialization), 在书中被拒绝了 – 尽量使用成员初值列完成”真正的初始化”.</em></p>

<p>最后讨论”不同编译单元内定义的non-local static对象”的初始化次序.</p>
<ul>
  <li>首先明确什么是static对象. 其寿命从被构造出来直到程序结束为止, 因此stack和heap-based对象被排除. 它包括global对象, 定义于namespace作用域内的对象, 在类内/在函数内以及在文件作用域内被声明为static对象.</li>
  <li>函数内的static对象被称为local static对象. 其他都都被叫做non-local static对象.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 库中的</span>
<span class="k">class</span> <span class="nc">FileSystem</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="cm">/*...*/</span>
    <span class="n">std</span><span class="o">::</span><span class="kt">size_t</span> <span class="n">numDisks</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>  <span class="c1">// 众多成员函数之一</span>
    <span class="cm">/*...*/</span>
<span class="p">};</span>
<span class="k">extern</span> <span class="n">FileSystem</span> <span class="n">tfs</span><span class="p">;</span>

<span class="c1">// 程序库用户建立的类</span>
<span class="k">class</span> <span class="nc">Directory</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">Directory</span><span class="p">(</span> <span class="cm">/*params*/</span> <span class="p">);</span>
    <span class="cm">/*...*/</span>
<span class="p">};</span>
<span class="n">Directory</span><span class="o">::</span><span class="n">Directory</span><span class="p">(</span> <span class="cm">/*params*/</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="cm">/*...*/</span>
    <span class="n">std</span><span class="o">::</span><span class="kt">size_t</span> <span class="n">disks</span> <span class="o">=</span> <span class="n">tfs</span><span class="p">.</span><span class="n">numDisks</span><span class="p">();</span>
    <span class="cm">/*...*/</span>
<span class="p">}</span>

<span class="n">Directory</span> <span class="nf">tempDir</span><span class="p">(</span> <span class="cm">/*params*/</span> <span class="p">);</span>
</code></pre></div></div>
<ul>
  <li>tfs必须在tempDie初始化之前被初始化.</li>
  <li>但是无法确保tfs在tempDir之前被初始化.</li>
  <li>“正确的初始化次序”无法被明确定义, 甚至不值得寻找”可决定正确次序”的特殊情况.</li>
</ul>

<pre><code class="language-cpp拒绝">{
    static FileSystem fs;
    return fs;
}

class Directory { /*...*/ };
Directory::Directory( /*params*/ )
{
    /*...*/
    std::size_t disks = tfs().numDisks();
    /*...*/
}
Directory&amp; tempDir()
{
    static Directory td;
    return td;
}
</code></pre>
<ul>
  <li>这种方法非常巧妙, 直接用心去体会代码比较合适.</li>
  <li>将每个non-local static对象搬到自己的专属函内, 该对象在该函数内被声明为static, 然后将该变量的引用返回出来. 换句话说就是non-local static对象被local static对象代替. 很显然这个过程中fs被初始化了(调用了它的默认构造函数). 这是设计模式<strong><em>Singleton</em></strong>模式的一个常见实现手法.</li>
  <li><em>为了保证多线程安全, 需要在单线程启动阶段(single-threaded startup portion)手工调用所有的reference-retruning函数, 这可以消除初始化相关的”竞速形势(race conditions)”.</em></li>
</ul>

<p>总结:</p>
<ul>
  <li>为内置型对象进行手工初始化, 因为C++不保证初始化它们.</li>
  <li>构造函数最好使用成员初值列(member initialization list), 而不要在构造函数本体内使用赋值操作(assignment). 初值列列出的成员变量, 其排列次序应该和它们在calss中的声明次序相同.</li>
  <li>为免除”跨编译单元的初始化次序”问题, 请以local static对象替换non-local static对象.</li>
</ul>

<h2 id="2-构造析构赋值运算---constructors-destructors-and-assignment-operators">2. 构造/析构/赋值运算 - Constructors, Destructors, and Assignment Operators</h2>
<h3 id="条款-05-了解c默默编写并调用哪些函数---know-what-functions-c-silently-writes-and-calls">条款 05: 了解C++默默编写并调用哪些函数 - Know what functions C++ silently writes and calls.</h3>
<ul>
  <li>编译器会为一个空类自动生成一个拷贝构造函数, 一个拷贝赋值操作符, 和一个析构函数.</li>
  <li>当一个类没有声明任何构造函数时, 编译器也会为你声明一个默认构造函数. 所以空类也会被生成一个默认构造函数.</li>
  <li>生成的析构函数是个non-virtual的, 除非它的基类自身声明了virtual析构函数.</li>
  <li>一个类即不声明拷贝构造函数也不声明拷贝赋值运算符, 编译器会为其创建(如果它们被调用的话).</li>
  <li>后补: 编译器生成的拷贝构造函数和拷贝赋值操作符会拷贝类中的每一个成员.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">NamedObject</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">NamedObject</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">);</span>
    <span class="n">NamedObject</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">);</span>
    <span class="cm">/*...*/</span>
<span class="nl">private:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">nameValue</span><span class="p">;</span>
    <span class="n">T</span> <span class="n">objectValue</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">NamedObject</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">no1</span><span class="p">(</span><span class="s">"Smallest Prime Number"</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="n">NamedObject</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">no2</span><span class="p">(</span><span class="n">no1</span><span class="p">);</span>
</code></pre></div></div>
<ul>
  <li>对于<code class="language-plaintext highlighter-rouge">no2</code>, 拷贝构造函数被调用了.</li>
  <li>
    <p>编译器生成的拷贝构造函数作用在<code class="language-plaintext highlighter-rouge">no1.nameValue</code>, <code class="language-plaintext highlighter-rouge">no1.objectValue</code>与<code class="language-plaintext highlighter-rouge">no2.nameValue</code>, <code class="language-plaintext highlighter-rouge">no2.objectValue</code>之间. 成员<code class="language-plaintext highlighter-rouge">NamedObject&lt;int&gt;::nameValue</code>是std::string型, 在<code class="language-plaintext highlighter-rouge">NamedObject</code>的拷贝构造函数中, 其拷贝构造函数被调用; 成员<code class="language-plaintext highlighter-rouge">NamedObject&lt;int&gt;::objectValue</code>是内置类型<code class="language-plaintext highlighter-rouge">int</code>, 所以<code class="language-plaintext highlighter-rouge">no2.nameValue</code>会拷贝<code class="language-plaintext highlighter-rouge">no1.nameValue</code>的每一个字节来完成初始化.</p>
  </li>
  <li>对于内含引用元素, <code class="language-plaintext highlighter-rouge">const</code>元素的类, 编译器会拒绝生成赋值动作. 还有一种情形就是一个派生类的基类的拷贝赋值运算符被声明为了<code class="language-plaintext highlighter-rouge">private</code>, 编译器会拒绝为该派生类生成拷贝赋值运算符.</li>
</ul>

<p>总结:</p>
<ul>
  <li>编译器可以暗自为class创建默认构造函数, 拷贝构造函数, 拷贝赋值操作符, 以及析构函数.</li>
</ul>

<h3 id="条款-06-若不想使用编译器自动生成的函数-就该明确拒绝---explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want">条款 06: 若不想使用编译器自动生成的函数, 就该明确拒绝 - Explicitly disallow the use of compiler-generated functions you do not want.</h3>
<ul>
  <li>如果没有手动声明拷贝构造函数或拷贝赋值运算符, 且有人尝试调用时, 系统会自动生成(条款05)且产出的函数为<code class="language-plaintext highlighter-rouge">public</code>.</li>
  <li>对于上一条的问题, 下面有一种解决方法:
    <ul>
      <li>为阻止这些函数被创建, 得自行声明它们为<code class="language-plaintext highlighter-rouge">private</code>, 这样可以直接阻止人们调用它们. 但是缺点是成员函数或者友元还是可以成功调用.</li>
      <li>为了防止刚才的情况发生, 可以不定义它们. 当有人在尝试调用它们的时候, 会获得一个链接错误(linkage error).</li>
      <li>上面这种做法(或者说是伎俩)是为大家接受的, 所以也被用在了C++ iostream程序库中.</li>
      <li>如果客户尝试拷贝了使用了以上方法的类, 编译器会阻挠他(因为函数为<code class="language-plaintext highlighter-rouge">private</code>); 如果是成员函数或者友调用了, 那么将会被链接器拦截.</li>
    </ul>
  </li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Uncopyable</span> <span class="p">{</span>
<span class="nl">protected:</span>
    <span class="n">Uncopyable</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>                          <span class="c1">// 允许派生对象构造和析构</span>
    <span class="o">~</span><span class="n">Uncopyable</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
<span class="nl">private:</span>
    <span class="n">Uncopyable</span><span class="p">(</span><span class="k">const</span> <span class="n">Uncopyable</span><span class="o">&amp;</span><span class="p">);</span>            <span class="c1">// 但是阻止拷贝行为</span>
    <span class="n">Uncopyable</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Uncopyable</span><span class="o">&amp;</span><span class="p">);</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">HomeForSale</span><span class="o">:</span> <span class="k">private</span> <span class="n">Uncopyable</span> <span class="p">{</span>       <span class="c1">// class不再声明</span>
    <span class="cm">/*...*/</span>                                       <span class="c1">// 拷贝构造和拷贝</span>
<span class="p">};</span>                                            <span class="c1">// 赋值运算符</span>
</code></pre></div></div>
<ul>
  <li>对于刚才的方法, 使用基类的方法可以简化一系列操作.</li>
  <li>上面的<code class="language-plaintext highlighter-rouge">Uncopyable</code>基类还有很多细节, 之后的条款中会用提及相关的内容.</li>
</ul>

<p>总结:</p>
<ul>
  <li>为驳回编译器自动(暗自)提供的机能, 可将相应的成员函数声明为<code class="language-plaintext highlighter-rouge">private</code>并且不予实现. 使用像<code class="language-plaintext highlighter-rouge">Uncopyable</code>这样的基类也是一种做法.</li>
</ul>

<h3 id="条款-07-为多态基类声明virtual析构函数---declear-destructors-virtual-in-polymorphic-base-classes">条款 07: 为多态基类声明virtual析构函数 - Declear destructors virtual in polymorphic base classes.</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TimeKeeper</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">TimeKeeper</span><span class="p">();</span>
    <span class="o">~</span><span class="n">TimeKeeper</span><span class="p">();</span>
    <span class="cm">/*...*/</span>
<span class="p">};</span>
<span class="k">class</span> <span class="nc">AtomicClock</span><span class="o">:</span> <span class="k">public</span> <span class="n">TimeKeeper</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">};</span>   <span class="c1">// 原子钟</span>
<span class="k">class</span> <span class="nc">WaterClock</span><span class="o">:</span> <span class="k">public</span> <span class="nf">TimeKeeper</span> <span class="p">(</span> <span class="cm">/*...*/</span> <span class="p">);</span>    <span class="c1">// 水钟</span>
<span class="k">class</span> <span class="nc">WristWatch</span><span class="o">:</span> <span class="k">public</span> <span class="n">TimeKeeper</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">};</span>    <span class="c1">// 腕表</span>

<span class="n">TimeKeeper</span><span class="o">*</span> <span class="nf">getTimeKeeper</span><span class="p">();</span>        <span class="c1">// 返回一个指针, 指向一个</span>
                                    <span class="c1">// TimeKeeper派生类的动态分配对象</span>

<span class="n">TimeKeeper</span><span class="o">*</span> <span class="n">ptk</span> <span class="o">=</span> <span class="n">getTimeKeeper</span><span class="p">();</span>  <span class="c1">// 从TimeKeeper继承体系</span>
                                    <span class="c1">// 获得一个动态分配对象</span>
<span class="cm">/*...*/</span>                                 <span class="c1">// 运用它 /*...*/ </span>
<span class="k">delete</span> <span class="n">ptk</span><span class="p">;</span>                         <span class="c1">// 释放它, 避免资源泄漏</span>
</code></pre></div></div>
<ul>
  <li>上面是一个基类和三个派生类, 以及一个工厂函数.</li>
  <li>为遵守工厂函数的规定, 被<code class="language-plaintext highlighter-rouge">getTimeKeeper()</code>返回的对象必须位于堆(heap)区. 因此为了避免泄漏内存和其他资源, 应将工厂函数返回的每一个对象delete掉.</li>
  <li>见条款13和条款18.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TimeKeeper</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">TimeKeeper</span><span class="p">();</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">TimeKeeper</span><span class="p">();</span>
    <span class="cm">/*...*/</span>
<span class="p">};</span>
<span class="n">TimeKeeper</span><span class="o">*</span> <span class="n">ptk</span> <span class="o">=</span> <span class="n">getTimeKeeper</span><span class="p">();</span>
<span class="cm">/*...*/</span>
<span class="k">delete</span> <span class="n">ptk</span><span class="p">;</span>                             <span class="c1">// Now, right!</span>
</code></pre></div></div>
<ul>
  <li>C++明确指出, 当一个派生类对象经由一个基类指针被删除, 而该基类带着一个非虚析构函数, 其结果为UB – 实际执行时通常发生的是对象的派生成分没被销毁; 如果<code class="language-plaintext highlighter-rouge">getTimeKeeper</code>返回指针指向一个<code class="language-plaintext highlighter-rouge">AtomicClock</code>对象, 其内的<code class="language-plaintext highlighter-rouge">AtomicClock</code>成分可能没被销毁, 而<code class="language-plaintext highlighter-rouge">AtomicClock</code>的析构函数也未能执行起来. 总之就是会出现一种诡异”局部销毁”的对象.</li>
  <li>
    <p>消除以上问题的方法很简单, 即给基类的添加虚析构函数.</p>
  </li>
  <li>不要为不做基类的函数声明<code class="language-plaintext highlighter-rouge">virtual</code>成员函数. C++实现虚函数, 使用的是一种vptr(virtual table pointer)映射到vtbl(virtual table), 也就是俗称的虚函数表. 一个虚函数需要一个vptr携带信息, 如果不需要虚函数还加上虚修饰, 则增加了一些(沢山)不必要的空间占用.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AWOV</span> <span class="p">{</span>                 <span class="c1">// AWOV = "Abstract w/o Virtuals"</span>
<span class="nl">public:</span>
    <span class="n">virutal</span> <span class="o">~</span><span class="n">AWOV</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>     <span class="c1">// 声明纯虚析构函数</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>纯虚函数导致抽象类, 抽象类不能被实例化. 抽象类类似Java的接口, 纯虚函数必须被派生类实现.</li>
  <li>析构函数的运作方式是, 最深层(或者是另一种理解上的表层)的派生类的析构函数最先被调用, 然后调用每一个基类的析构函数. 编译器会为<code class="language-plaintext highlighter-rouge">AWOV</code>类的每一个派生类创建一个对<code class="language-plaintext highlighter-rouge">~AWOV</code>的调用行为, 于是你必须为派生类中的这个函数进行定义, 否则链接器就不高兴了.</li>
  <li>“给基类一个虚析构函数”这个规则只适用于多态基类身上, 这种设计目的为了用来”通过基类接口处理派生对象”, 比如说刚才的那个例子.</li>
</ul>

<p>总结:</p>
<ul>
  <li>带多态性质的基类应声明一个虚析构函数. 如果类带有任何虚函数, 它就应该拥有一个虚析构函数.</li>
  <li>类设计目的如果不是作为基类使用, 或不是为了具备多态性, 就不该声明虚析构函数.</li>
</ul>

<h3 id="条款-08-别让异常逃离析构函数---prevent-exceptions-from-leaving-destructors">条款 08: 别让异常逃离析构函数 - Prevent exceptions from leaving destructors.</h3>
<ul>
  <li>C++并不禁止析构函数吐出异常, 但是它不推荐你这么做. (因为可能会引发UB.)</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DBConnection</span> <span class="p">{</span>                   <span class="c1">// 假设这是一个用于数据库连接的类</span>
<span class="nl">public:</span>
    <span class="cm">/*...*/</span>
    <span class="k">static</span> <span class="n">DBConnection</span> <span class="n">create</span><span class="p">();</span>      <span class="c1">// /*...*/</span>
    <span class="kt">void</span> <span class="n">close</span><span class="p">();</span>                      <span class="c1">// 关闭连接, 失败则抛出异常</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">DBConn</span> <span class="p">{</span>                         <span class="c1">// DBConnection的管理类, 见第三章</span>
<span class="nl">public:</span>
    <span class="cm">/*...*/</span>
    <span class="c1">// Version O</span>
    <span class="o">~</span><span class="n">DBConn</span><span class="p">()</span>                          <span class="c1">// 确保数据库连接总是会被关闭</span>
    <span class="p">{</span>
        <span class="n">db</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
    <span class="p">}</span>
<span class="nl">private:</span>
    <span class="n">DBConnection</span> <span class="n">db</span><span class="p">;</span>
<span class="p">};</span>

<span class="p">{</span>                                       <span class="c1">// 开启一个区块</span>
    <span class="n">DBConn</span> <span class="n">dbc</span><span class="p">(</span><span class="n">DBConnection</span><span class="o">::</span><span class="n">create</span><span class="p">());</span> <span class="c1">// 建立一个DBConnection对象并交给DBConn对象管理</span>
    <span class="cm">/*...*/</span>                                 <span class="c1">// 通过DBConn的接口使用DBConnection对象</span>
<span class="p">}</span>                                       <span class="c1">// 在区块结束点, DBConn对象被销毁</span>
                                        <span class="c1">// 因而自动为DBConnection对象调用close</span>

<span class="c1">// Version 1</span>
<span class="n">DBConnn</span><span class="o">::~</span><span class="n">DBConn</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span> <span class="n">db</span><span class="p">.</span><span class="n">close</span><span class="p">();</span> <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="cm">/*...*/</span><span class="p">)</span> <span class="p">{</span>
        <span class="err">制作运转记录</span><span class="p">,</span> <span class="err">记下对</span><span class="n">close</span><span class="err">的调用失败</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">abort</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Version 2</span>
<span class="n">DBConn</span><span class="o">::~</span><span class="n">DBConn</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span> <span class="n">db</span><span class="p">.</span><span class="n">close</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="cm">/*...*/</span><span class="p">)</span> <span class="p">{</span>
        <span class="err">制作运转记录</span><span class="p">,</span> <span class="err">记下对</span><span class="n">close</span><span class="err">的调用失败</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>如果<code class="language-plaintext highlighter-rouge">DBConn</code>的析构函数调用<code class="language-plaintext highlighter-rouge">DBConnection</code>对象的<code class="language-plaintext highlighter-rouge">close</code>函数成功, 一切无事; 如果抛出异常, Version O就会传播这个异常, 这不是C++所希望的.</li>
  <li>Version 1介绍了一种处理异常的版本 – 调用<code class="language-plaintext highlighter-rouge">abort</code>强迫程序结束, 这样可以直接将UB扼杀于摇篮.</li>
  <li>Version 2介绍了另一种处理异常的版本 – 直接吞下异常. 虽然这是一种可行的方案, 但是太过草率. 这种方法用于出错了程序还必须要执行下去时.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Version 3</span>
<span class="k">class</span> <span class="nc">DBConn</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="cm">/*...*/</span>
    <span class="kt">void</span> <span class="n">close</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">db</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
        <span class="n">closed</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">~</span><span class="n">DBConn</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">closed</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="n">db</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="cm">/*...*/</span><span class="p">)</span> <span class="p">{</span>
                <span class="err">制作运转记录</span><span class="p">,</span> <span class="err">记下对</span><span class="n">close</span><span class="err">的调用失败</span><span class="p">;</span>
                <span class="cm">/*...*/</span>       <span class="c1">// 吞下异常</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="nl">private:</span>
    <span class="n">DBConnection</span> <span class="n">db</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">closed</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>Version 3提供了一个用户接口, 将调用<code class="language-plaintext highlighter-rouge">close</code>的责任从<code class="language-plaintext highlighter-rouge">DBConn</code>析构函数手上转移到了<code class="language-plaintext highlighter-rouge">DBConn</code>的用户手上, 但仍有其析构函数制造一个双保险. 这样能给用户机会第一手去处理异常, 而避免析构函数自动完成了”过早结束程序”或者”发生UB”之类的风险.</li>
  <li>这种做法并没有违反”肆无忌惮转移负担”和条款18.</li>
</ul>

<p>总结:</p>
<ul>
  <li>析构函数绝对不要吐出异常. 如果一个析构函数调用的函数可能抛出异常, 析构函数应该捕捉任何异常, 然后吞下它们(不传播)或结束程序.</li>
  <li>如果客户需要对某个操作函数运行期间抛出的异常做出反应, 那么类应该提供一个普通函数(而非在析构函数中)执行该操作.</li>
</ul>

<h3 id="条款-09-绝不在构造和析构过程中调用虚函数---never-call-virtual-functions-during-construction-or-destruction">条款 09: 绝不在构造和析构过程中调用虚函数 - Never call virtual functions during construction or destruction.</h3>
<ul>
  <li>不该在构造函数和析构函数期间调用虚函数, 因为这样的调用不会带来预想的结果.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Transaction</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">Transaction</span><span class="p">();</span>                              <span class="c1">// 所有交易的基类</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">logTransaction</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    <span class="c1">// 做出一份因类型不同而不同</span>
                                                <span class="c1">// 的日志记录</span>
    <span class="cm">/*...*/</span>
<span class="p">};</span>

<span class="n">Transaction</span><span class="o">::</span><span class="n">Transaction</span><span class="p">()</span>                      <span class="c1">// 基类的构造函数实现</span>
<span class="p">{</span>
    <span class="cm">/*...*/</span>
    <span class="n">logTransaction</span><span class="p">();</span>                           <span class="c1">// 最后动作是记录这笔交易</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">BuyTransaction</span><span class="o">:</span> <span class="k">public</span> <span class="n">Transaction</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">logTransaction</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>        <span class="c1">// 记录此类交易</span>
    <span class="cm">/*...*/</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">SellTransaction</span><span class="o">:</span> <span class="k">public</span> <span class="n">Transaction</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">logTransaction</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>        <span class="c1">// 同上</span>
    <span class="cm">/*...*/</span>
<span class="p">};</span>

<span class="n">BuyTransaction</span> <span class="n">b</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">BuyTransaction</code>构造函数会被调用, 但是<code class="language-plaintext highlighter-rouge">Transaction</code>构造函数一定会更早调用. 但是那时虚函数还不是虚函数(或者应该说vptr还没有记录内容).</li>
  <li>派生对象内的基类成分会在派生类自身成分被构造之前被构造妥当.</li>
  <li>
    <p>更深层的意思, 派生对象在执行派生类构造函数之前, 不会成为一个派生类对象, 而会成为一个基类对象.</p>
  </li>
  <li>析构函数的执行顺序在上一条款说过, 同理.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Transaction</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">Transaction</span><span class="p">()</span>
    <span class="p">{</span> <span class="n">init</span><span class="p">();</span> <span class="p">}</span>                   <span class="c1">// 调用非虚函数</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">logTransaction</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nl">private:</span>
    <span class="kt">void</span> <span class="n">init</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="cm">/*...*/</span>
        <span class="n">logTransaction</span><span class="p">();</span>         <span class="c1">// 这里调用虚函数</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>如果<code class="language-plaintext highlighter-rouge">Transaction</code>有多个构造函数, 将它们重复的部分放入一个<code class="language-plaintext highlighter-rouge">init</code>初始化函数中是非常优秀的做法.</li>
  <li>但是这样仍在基类的构造函数中深层地调用了虚函数. 构造析构过程不能调用虚函数, 且它们调用的其它函数也要符合这一约束.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Transaction</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">explicit</span> <span class="n">Transaction</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">logInfo</span><span class="p">);</span>
    <span class="kt">void</span> <span class="n">logTransaction</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">logInfo</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
    <span class="cm">/*...*/</span>
<span class="p">};</span>
<span class="n">Transaction</span><span class="o">::</span><span class="n">Transaction</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">logInfo</span><span class="p">)</span>
<span class="p">{</span>
    <span class="cm">/*...*/</span>
    <span class="n">logTransaction</span><span class="p">(</span><span class="n">logInfo</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">BuyTransaction</span><span class="o">:</span> <span class="k">public</span> <span class="n">Transaction</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">BuyTransaction</span><span class="p">(</span> <span class="o">*</span><span class="n">parameters</span><span class="o">*</span> <span class="p">)</span>
     <span class="o">:</span> <span class="n">Transaction</span><span class="p">(</span><span class="n">createLogString</span><span class="p">(</span> <span class="o">*</span><span class="n">parameters</span><span class="o">*</span> <span class="p">))</span>
    <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">}</span>
    <span class="cm">/*...*/</span>
<span class="nl">private:</span>
    <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">createLogString</span><span class="p">(</span> <span class="o">*</span><span class="n">parameters</span><span class="o">*</span> <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>使用上面的方法可以避免本条例中提到的问题.</li>
</ul>

<p>总结:</p>
<ul>
  <li>在构造和析构期间不要调用虚函数, 因为这类调用从不下降至派生类(比起当前执行构造函数和析构函数的那层).</li>
</ul>

<h3 id="条款-10-令operator返回一个引用指向this---have-assignment-operators-return-a-reference-to-this">条款 10: 令operator=返回一个引用指向<code class="language-plaintext highlighter-rouge">*this</code> - Have assignment operators return a reference to <code class="language-plaintext highlighter-rouge">*this</code>.</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">;</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>        <span class="c1">// 赋值连锁形式</span>
<span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">z</span> <span class="o">=</span> <span class="mi">15</span><span class="p">));</span>    <span class="c1">// &lt;解析&gt;</span>
</code></pre></div></div>
<ul>
  <li>赋值采用右结合律.</li>
  <li>为了实现连锁赋值, 赋值操作符必须返回一个引用指向操作符左侧的实参. 这是为类实现操作符时应该遵循的协议.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Widget</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="cm">/*...*/</span>
    <span class="n">Widget</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">+=</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="cm">/*...*/</span>
        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">Widget</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="cm">/*...*/</span>
        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="cm">/*...*/</span>
<span class="p">};</span>
</code></pre></div></div>

<p>总结:</p>
<ul>
  <li>令赋值(assignment)操作符返回一个指向<code class="language-plaintext highlighter-rouge">*this</code>的引用.</li>
</ul>

<h3 id="条款-11-在operator中处理自我赋值---handle-assignment-to-self-in-operator">条款 11: 在operator=中处理自我赋值 - Handle assignment to self in operator=.</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Widget</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">};</span>
<span class="n">Widget</span> <span class="n">w</span><span class="p">;</span>
<span class="cm">/*...*/</span>
<span class="n">w</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>                   <span class="c1">// 愚蠢的自我赋值</span>
<span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>             <span class="c1">// 潜在的自我赋值</span>
<span class="o">*</span><span class="n">px</span> <span class="o">=</span> <span class="o">*</span><span class="n">py</span><span class="p">;</span>               <span class="c1">// 潜在的自我赋值</span>

<span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">};</span>
<span class="k">class</span> <span class="nc">Derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">};</span>
<span class="kt">void</span> <span class="nf">doSomething</span><span class="p">(</span><span class="k">const</span> <span class="n">Base</span><span class="o">&amp;</span> <span class="n">rb</span><span class="p">,</span> <span class="n">Derived</span><span class="o">*</span> <span class="n">pd</span><span class="p">);</span>  <span class="c1">// 更加潜在的</span>
                            <span class="c1">//rb和*pd可能指向同一个对象</span>
</code></pre></div></div>
<ul>
  <li>虽然第一种自我赋值看起来很愚蠢, 但是它合法.</li>
  <li>第二种和第三种潜在的自我赋值是别名(aliasing)导致的.</li>
  <li>第四种也可能存在一种潜在的自我赋值行为.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Bitmap</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">};</span>
<span class="k">class</span> <span class="nc">Widget</span> <span class="p">{</span>
    <span class="cm">/*...*/</span>
<span class="nl">private:</span>
    <span class="n">Bitmap</span><span class="o">*</span> <span class="n">pb</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// 不安全版本</span>
<span class="n">Widget</span><span class="o">&amp;</span> <span class="n">Widget</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">delete</span> <span class="n">pb</span><span class="p">;</span>
    <span class="n">pb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bitmap</span><span class="p">(</span><span class="o">*</span><span class="n">rhs</span><span class="p">.</span><span class="n">pb</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 安全版本</span>
<span class="n">Widget</span><span class="o">&amp;</span> <span class="n">Widget</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">rhs</span><span class="p">)</span> <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>

    <span class="k">delete</span> <span class="n">pb</span><span class="p">;</span>
    <span class="n">pb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bitmap</span><span class="p">(</span><span class="o">*</span><span class="n">rhs</span><span class="p">.</span><span class="n">pb</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 异常安全性(exception safety)</span>
<span class="n">Widget</span><span class="o">&amp;</span> <span class="n">Widget</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Bitmap</span><span class="o">*</span> <span class="n">pOrig</span> <span class="o">=</span> <span class="n">pb</span><span class="p">;</span>
    <span class="n">pb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bitmap</span><span class="p">(</span><span class="o">*</span><span class="n">rhs</span><span class="p">.</span><span class="n">pb</span><span class="p">);</span>
    <span class="k">delete</span> <span class="n">pOrig</span><span class="p">;</span>
    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 证同测试+异常安全性(可能会降低效率)</span>
<span class="n">Widget</span><span class="o">&amp;</span> <span class="n">Widget</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">rhs</span><span class="p">)</span> <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>

    <span class="n">Bitmap</span><span class="o">*</span> <span class="n">pOrig</span> <span class="o">=</span> <span class="n">pb</span><span class="p">;</span>
    <span class="n">pb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bitmap</span><span class="p">(</span><span class="o">*</span><span class="n">rhs</span><span class="p">.</span><span class="n">pb</span><span class="p">);</span>
    <span class="k">delete</span> <span class="n">pOrig</span><span class="p">;</span>
    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>如果遵循条款13和条款14的忠告运用对象管理资源, 那么你的赋值运算符或许是”自我赋值安全的”(self-assignment-safe), 无须额外操心; 而如果尝试自行管理资源, 可能会掉进”在停止使用资源之前意外释放它”的陷阱.</li>
  <li>安全版本使用一种”证同测试(identity test)”的方法, 达到自我赋值检验的目的.</li>
  <li>异常安全性的版本见条款29.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Bitmap</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">};</span>
<span class="k">class</span> <span class="nc">Widget</span> <span class="p">{</span>
    <span class="cm">/*...*/</span>
    <span class="kt">void</span> <span class="n">swap</span><span class="p">(</span><span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">);</span>   <span class="c1">// 交换*this和rhs的数据, 详见条款29</span>
    <span class="cm">/*...*/</span>
<span class="p">};</span>

<span class="n">Widget</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Widget</span> <span class="n">temp</span><span class="p">(</span><span class="n">rhs</span><span class="p">);</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 另一个精巧的版本</span>
<span class="n">Widget</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">Widget</span> <span class="n">rhs</span><span class="p">)</span>    <span class="c1">// 副本在值传递的时候产生</span>
<span class="p">{</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">rhs</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>道理如此简单, 见代码. btw, 这种技术被叫做copy-and-swap.</li>
  <li>精巧版本的代码虽然牺牲了代码的清晰性, 但是将”拷贝操作”从函数本体内移到”函数参数构造阶段”可令编译器有时生成更高效的代码.</li>
</ul>

<p>总结:</p>
<ul>
  <li>确保当对象自我复制时<code class="language-plaintext highlighter-rouge">operator=</code>有良好行为. 其中技术包括比较”来源对象”和”目标对象”的地址, 精心周到的语句顺序, 以及copy-and-swap.</li>
  <li>确定任何函数如果操作一个以上的对象, 而其中多个对象是同一个对象时, 其行为仍然正确.</li>
</ul>

<h3 id="条款-12-复制对象时勿忘其每一个成分---copy-all-parts-of-an-object">条款 12: 复制对象时勿忘其每一个成分 - Copy all parts of an object.</h3>
<ul>
  <li>良好的面向对象系统(OO-systems)会将对象的内部封装起来, 只保留两个函数负责对象拷贝, 一个是拷贝构造函数, 另一个是拷贝赋值操作符, 将它们统称为拷贝函数.</li>
  <li>条款5中提到编译器会在必要时为我们生成拷贝函数, 并说明这些生成版函数的行为: 将被拷贝对象的所有对象变量都做一份拷贝.</li>
  <li>原书说如果自己写拷贝函数编译器可能会不高兴并且会报复你:</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">logCall</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">funcName</span><span class="p">);</span>
<span class="k">class</span> <span class="nc">Customer</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="cm">/*...*/</span>
    <span class="n">Customer</span><span class="p">(</span><span class="k">const</span> <span class="n">Customer</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">);</span>
    <span class="n">Customer</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Customer</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">);</span>
    <span class="cm">/*...*/</span>
<span class="nl">private:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">Customer</span><span class="o">::</span><span class="n">Customer</span><span class="p">(</span><span class="k">const</span> <span class="n">Customer</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
  <span class="o">:</span> <span class="n">name</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">logCall</span><span class="p">(</span><span class="s">"Customer copy constructor"</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">Customer</span><span class="o">&amp;</span> <span class="n">Customer</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Customer</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">logCall</span><span class="p">(</span><span class="s">"Customer copy assignment operator"</span><span class="p">);</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Update</span>
<span class="k">class</span> <span class="nc">Date</span> <span class="p">{</span> <span class="cm">/*...*/</span> <span class="p">}</span><span class="n">l</span>
<span class="k">class</span> <span class="nc">Customer</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="cm">/*...*/</span>
<span class="nl">private:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>
    <span class="n">Date</span> <span class="n">lastTransaction</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Customer</code>的成员被修改了, 但是既有的拷贝函数并未做对应的变动, 变成了局部拷贝(partial copy).</li>
  <li>即使在最高警告级别中(条款53), 大多数编译器对此不会发出任何怨言, 这是编译器在报复你 – 既然你拒绝它们为你生成拷贝函数, 如果你的代码不完全, 它们也不会告诉你.</li>
  <li>如果你为类添加了一个成员变量, 你必须同时修改拷贝函数.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PriorityCustomer</span><span class="o">:</span> <span class="k">public</span> <span class="n">Customer</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="cm">/*...*/</span>
    <span class="n">PriorityCustomer</span><span class="p">(</span><span class="k">const</span> <span class="n">PriorityCustomer</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">);</span>
    <span class="n">PriorityCustomer</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">PriorityCustomer</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">);</span>
    <span class="cm">/*...*/</span>
<span class="nl">private:</span>
    <span class="kt">int</span> <span class="n">priority</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">PriorityCustomer</span><span class="o">::</span><span class="n">PriorityCustomer</span><span class="p">(</span><span class="k">const</span> <span class="n">PriorityCustomer</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span> 
  <span class="o">:</span> <span class="n">priority</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">priority</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">logCall</span><span class="p">(</span><span class="s">"PriorityCustomer copy constructor"</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">PriorityCustomer</span><span class="o">&amp;</span>
<span class="n">PriorityCustomer</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">PriorityCustomer</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">logCall</span><span class="p">(</span><span class="s">"PriorityCustomer copy assignment operator"</span><span class="p">);</span>
    <span class="n">priority</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">priority</span><span class="p">;</span>
    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>派生类的拷贝赋值操作符看似好像复制了其类内的每一个成员. 但是其实它只复制了类的派生成分, 并没有复制其基类成分.</li>
  <li>同样的, 编译器会报复你. 对于此派生类的拷贝构造, 派生成分被复制, 针对基类成分编译器会调用基类的默认构造函数; 对于其拷贝复制操作符, 它不会修改基类成分.</li>
  <li>
    <dl>
      <dt>于是修正的方法容易又复杂 – 为派生类调用修改基类成分对应的方法:</dt>
      <dt>```c++</dt>
      <dt>PriorityCustomer::PriorityCustomer(const PriorityCustomer&amp; rhs)</dt>
      <dd>Customer(rhs),
priority(rhs.priority)
{
logCall(“PriorityCustomer copy constructor”);
}</dd>
    </dl>
  </li>
</ul>

<p>PriorityCustomer&amp;
PriorityCustomer::operator=(const PriorityCustomer&amp; rhs)
{
    logCall(“PriorityCustomer copy assignment operator”);
    Customer::operator=(rhs);
    priority = rhs.priority;
    return *this;
}</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; 令拷贝赋值操作符调用拷贝构造函数时不合理的, 因为这就像试图构造一个已经存在的对象. 这件事如此荒谬, 乃至于根本没有相关语法. 是有一些看似如你所愿的语法, 但其实不是; 也的确有些语法背后真正做了它, 但它们在某些情况下会造成你的对象败坏, 所以我不打算将那些语法呈现给你看. 单纯地接受这个叙述吧: 你不该令拷贝赋值操作符调用拷贝构造函数.    
&gt; 反方向 -- 令拷贝构造函数调用拷贝赋值操作符 -- 同样无意义. 构造函数用来初始化新对象, 而赋值操作符只施行于已初始化对象身上. 对一个尚未构造好的对象赋值, 就像在一个尚未初始化的对象身上做"只对已初始化对象才有意义"的事一样. 无聊嘛! 别尝试. 

- 在条款9中提到的, 使用一个`init`函数去替换多构造函数中重复的部分的类似做法, 同样可以运用于这俩拷贝函数上.  

总结:
- 拷贝函数应该缺包复制"对象内的所有成员变量"及"所有基类成分".  
- 不要尝试以某个拷贝函数实现另一个拷贝函数. 应该将共同机能放进第三个函数中, 并由两个拷贝函数共同调用.


## 3. 资源管理 - Resource Management
### 条款 13. 以对象管理资源 - Use objects to manage resources. 
```c++
class Investment { /*...*/ };          // root class
Investment* createInvestment();    // 返回指针, 指向 Investment 体系内的动态分配对象.
                                   // 调用者有责任删除它

// ver.1
void f()
{
    Investment* pInv = createInvestment();
    /*...*/
    delete pInv;                   // **该 delete 坑会因为各种原因无法访达**
}

// ver.2
void f()
{
    std::auto_ptr&lt;Investment&gt; pInv(createInvestment());
    /*...*/
}

</code></pre></div></div>
<ul>
  <li>为确保 <code class="language-plaintext highlighter-rouge">createInvestment</code> 返回的资源总是被释放, 我们将资源放进对象内, 我们便可以依赖 C++ 的”析构函数自动调用机制”确保资源被释放.</li>
  <li>标准库提供的 <code class="language-plaintext highlighter-rouge">auto_ptr</code> 就提供了类似的功能, 其析构函数会在其离开作用域或函数时被调用, 其指向的对象会被调用 <code class="language-plaintext highlighter-rouge">delete</code>.</li>
</ul>

<p>通过这个简单的例子示范”以对象管理资源”的两个关键思想:</p>
<ul>
  <li><strong>获得资源后立刻放进管理对象(managing object)内</strong>. 以上代码中 <code class="language-plaintext highlighter-rouge">createInvestment</code> 返回的资源被当作管理者 <code class="language-plaintext highlighter-rouge">auto_ptr</code> 的初值. 实际上这就是”资源取得便是初始化”(Resource Acquisition Is Initialization; RAII).</li>
  <li><strong>管理对象运用析构函数确保资源被释放</strong>.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">Investment</span><span class="o">&gt;</span> <span class="n">pInv1</span><span class="p">(</span><span class="n">createInvestment</span><span class="p">());</span>   <span class="c1">// pInv1 指向返回物</span>
<span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">Investment</span><span class="o">&gt;</span> <span class="n">pInv2</span><span class="p">(</span><span class="n">pInv1</span><span class="p">);</span>                <span class="c1">// pInv2 指向对象, pInv1 被设置为 null</span>
<span class="n">pInv1</span> <span class="o">=</span> <span class="n">pInv2</span><span class="p">;</span>                    <span class="c1">// pInv1 指向对象, pInv2 被设置为 null</span>
</code></pre></div></div>
<ul>
  <li>根据以上特性可以总结, 一个对象不能被多个 <code class="language-plaintext highlighter-rouge">auto_ptr</code> 引用, 否则可能会悬垂引用的问题.</li>
  <li>所以这里对的 <code class="language-plaintext highlighter-rouge">auto_ptr</code> 的复制行为, 被类似移动的行为替代了.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">f</span><span class="p">()</span>
<span class="p">{</span>
    <span class="cm">/*...*/</span>
    <span class="n">std</span><span class="o">::</span><span class="n">tr1</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Investment</span><span class="o">&gt;</span> <span class="n">pInv1</span><span class="p">(</span><span class="n">createInvestment</span><span class="p">());</span>  <span class="c1">// pInv1 指向返回物</span>
    <span class="n">std</span><span class="o">::</span><span class="n">tr1</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Investment</span><span class="o">&gt;</span> <span class="n">pInv2</span><span class="p">(</span><span class="n">pInv1</span><span class="p">);</span>     <span class="c1">// pInv1 和 pInv2 指向同一个对象</span>
    <span class="n">pInv1</span> <span class="o">=</span> <span class="n">pInv2</span><span class="p">;</span>    <span class="c1">// 无变化</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>新标准库中添加了 <code class="language-plaintext highlighter-rouge">shared_ptr</code> 对象作为”引用计数型智能指针”(reference-counting smart pointer; RCSP). 原书的 C++ 版本可能较旧, 名称空间相对可能有一些区别.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">aps</span><span class="p">(</span><span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">[</span><span class="mi">10</span><span class="p">]);</span>  <span class="c1">// 错误</span>
<span class="n">std</span><span class="o">::</span><span class="n">tr1</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">spi</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">1024</span><span class="p">]);</span>         <span class="c1">// 错误</span>
</code></pre></div></div>
<ul>
  <li>注意, 无论是以上哪个智能指针, 析构函数内完成的都是 <code class="language-plaintext highlighter-rouge">delete</code> 动作而不是 <code class="language-plaintext highlighter-rouge">delete[]</code> 动作.</li>
  <li>标准库没有这样进行针对性设计的原因, 是例如 <code class="language-plaintext highlighter-rouge">vector</code> 或是 <code class="language-plaintext highlighter-rouge">string</code> 这样的几乎可以取代动态分配而得到的数组.</li>
  <li>如果一定要用针对数组设计的智能指针, 参考条款 55 的 Boost 内容.</li>
</ul>

<p>总结:</p>
<ul>
  <li>为防止资源泄露, 请使用 RAII 对象, 它们在构造函数中获得资源并在析构函数中释放资源.</li>
  <li>两个常被使用的 RAII 类分别是 <code class="language-plaintext highlighter-rouge">std::tr1::shared_ptr</code> 和 <code class="language-plaintext highlighter-rouge">std::auto_ptr</code>. 前者通常是最佳选择, 因为其拷贝行为比较直观. 如果使用后者, 复制动作会使它指向 null.</li>
</ul>

<h3 id="条款-14-在资源管理类中小心复制行为---think-carefully-about-copying-behavior-in-resource-managing-classes">条款 14. 在资源管理类中小心复制行为 - Think carefully about copying behavior in resource-managing classes.</h3>
<p>条款 13 中提到 RAII, 只适用于分配在堆上的资源. 对于其他的资源, 智能指针往往不适合作为资源掌管者. 所以, 有可能需要建立自己的资源管理类.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">lock</span><span class="p">(</span><span class="n">Mutex</span><span class="o">*</span> <span class="n">pm</span><span class="p">);</span>       <span class="c1">// 锁定 pm 所指的互斥器</span>
<span class="kt">void</span> <span class="nf">unlock</span><span class="p">(</span><span class="n">Mutex</span><span class="o">*</span> <span class="n">pm</span><span class="p">);</span>     <span class="c1">// 将互斥器解除锁定</span>

<span class="k">class</span> <span class="nc">Lock</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">explicit</span> <span class="n">Lock</span><span class="p">(</span><span class="n">Mutex</span><span class="o">*</span> <span class="n">pm</span><span class="p">)</span>
     <span class="o">:</span> <span class="n">mutexPtr</span><span class="p">(</span><span class="n">pm</span><span class="p">)</span>
    <span class="p">{</span> <span class="n">lock</span><span class="p">(</span><span class="n">mutexPtr</span><span class="p">);</span> <span class="p">}</span>
    <span class="o">~</span><span class="n">Lock</span><span class="p">()</span> <span class="p">{</span> <span class="n">unlock</span><span class="p">(</span><span class="n">mutexPtr</span><span class="p">);</span> <span class="p">}</span>
<span class="nl">private:</span>
    <span class="n">Mutex</span><span class="o">*</span> <span class="n">mutexPtr</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">Mutex</span> <span class="n">m</span><span class="p">;</span>
<span class="p">{</span>                           <span class="c1">// 建立一个作用域用来定义 critical section</span>
    <span class="n">Lock</span> <span class="n">m1</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m</span><span class="p">);</span>            <span class="c1">// 构造器会帮助锁定互斥器</span>
<span class="p">}</span>                           <span class="c1">// 作用域末尾, 析构器调用, 自动解除互斥器锁定</span>
<span class="n">Lock</span> <span class="nf">ml1</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m</span><span class="p">);</span>               <span class="c1">// 锁定 m</span>
<span class="n">Lock</span> <span class="nf">ml2</span><span class="p">(</span><span class="n">ml1</span><span class="p">);</span>              <span class="c1">// 将 ml1 复制到 ml2 身上. 会发生什么?</span>
</code></pre></div></div>
<ul>
  <li>对于 RAII 对象的复制, 条款 13 中已经提到过, 有两种解决方案, 分别为 <code class="language-plaintext highlighter-rouge">auto_ptr</code> 代表的禁止复制和 <code class="language-plaintext highlighter-rouge">shared_ptr</code> 代表的对底层资源的”引用计数法”.</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Lock</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">explicit</span> <span class="n">Lock</span><span class="p">(</span><span class="n">Mutex</span><span class="o">*</span> <span class="n">pm</span><span class="p">)</span>
     <span class="o">:</span> <span class="n">mutexPtr</span><span class="p">(</span><span class="n">pm</span><span class="p">,</span> <span class="n">unlock</span><span class="p">)</span>      <span class="c1">// 以某个 Mutex 初始化 shared_ptr, 第二个参数为删除器</span>
    <span class="p">{</span>
        <span class="n">lock</span><span class="p">(</span><span class="n">mutexPtr</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
    <span class="p">}</span>
<span class="nl">private:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">tr1</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Mutex</span><span class="o">&gt;</span> <span class="n">mutexPtr</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">tr1::shared_ptr</code> 允许指定删除器, 那是一个函数或者函数对象, 将会在引用计数为 0 时被调用.</li>
</ul>

<p>还有一种拷贝方法是执行深度拷贝(deep copying).</p>

<p>总结:</p>
<ul>
  <li>复制 RAII 对象必须一并复制它所管理的资源, 所以资源的复制行为决定 RAII 对象的复制行为.</li>
  <li>普遍而常见的 RAII 类拷贝行为是: 抑制拷贝, 施行引用计数法. 不过其他行为也都可能被实现.</li>
</ul>
:ET