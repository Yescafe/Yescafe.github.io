I"jê<h2 id="17-letter-combinations-of-a-phone-number">17. Letter Combinations of a Phone Number</h2>
<p><strong>Difficulty: medium</strong></p>

<p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.</p>

<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="" /></p>

<p><strong>Example:</strong></p>

<p>Input: ‚Äú23‚Äù<br />
Output: [‚Äúad‚Äù, ‚Äúae‚Äù, ‚Äúaf‚Äù, ‚Äúbd‚Äù, ‚Äúbe‚Äù, ‚Äúbf‚Äù, ‚Äúcd‚Äù, ‚Äúce‚Äù, ‚Äúcf‚Äù].</p>

<p><strong>Note:</strong></p>

<p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>

<p>‰∏ÄÁúãÂ∞±Áü•ÈÅìÊòØdfs, ‰∏çÂ§öËØ¥, ‰∏ä‰ª£Á†Å:<br />
<strong>1st Version:</strong></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">lst</span><span class="p">;</span>
    <span class="n">string</span><span class="o">*</span> <span class="n">ds</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">letterCombinations</span><span class="p">(</span><span class="n">string</span> <span class="n">digits</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">digits</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
            <span class="k">return</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">();</span>
        <span class="n">ds</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">digits</span><span class="p">;</span>
        <span class="n">dfs</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">lst</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">void</span> <span class="n">dfs</span><span class="p">(</span><span class="n">string</span> <span class="n">prefix</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pos</span> <span class="o">&gt;=</span> <span class="n">ds</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">this</span><span class="o">-&gt;</span><span class="n">lst</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">move</span><span class="p">(</span><span class="n">prefix</span><span class="p">));</span>
            <span class="k">return</span> <span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">switch</span><span class="p">((</span><span class="o">*</span><span class="n">ds</span><span class="p">)[</span><span class="n">pos</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"a"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"b"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"c"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"d"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"e"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"f"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">4</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"g"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"h"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"i"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">5</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"j"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"k"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"l"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">6</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"m"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"n"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"o"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">7</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"p"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"q"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"r"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"s"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">8</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"t"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"u"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"v"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">9</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"w"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"x"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"y"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="s">"z"</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="nl">default:</span>
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>Rate:</strong><br />
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Letter Combinations of a Phone Number.
Memory Usage: 9.4 MB, less than 5.71% of C++ online submissions for Letter Combinations of a Phone Number.</p>

<p>ÁúüÁöÑÈùûÂ∏∏ÁöÑÂø´, ‰ΩÜÊòØÁúãÂà∞9.4MBÁöÑÂÜÖÂ≠ò, Â∞±Áü•ÈÅìËøôÈ¢òÊ≤°ÈÇ£‰πàÁÆÄÂçï‰∫Ü.</p>

<p>Áúã‰∫Ü‰∏Ä‰∏ãËÆ®ËÆ∫Âå∫Â•ΩÂÉèÂÜÖÂ≠òÁî®ÁöÑ‰πüÊå∫Â§öÁöÑ, Áúã‰∫Ü‰∏Ä‰∏ãËÆ®ËÆ∫Âå∫ÂèåÁôæÁöÑ‰ª£Á†Å, ÊÑüËßâÊ≤°‰ªÄ‰πàÂ§™Â§ßÂå∫Âà´, Êêû‰∏çÂ§™ÊáÇ. ÊÄª‰πã‰ª£Á†ÅË¥¥‰∏ä.</p>

<p><strong>2nd Version:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// https://leetcode.com/problems/letter-combinations-of-a-phone-number/discuss/360946/C%2B%2B%3A-faster-100-in-time-and-100-in-memory</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">buff</span><span class="p">;</span>
    <span class="k">const</span> <span class="n">map</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="n">string</span><span class="o">&gt;</span> <span class="n">mp</span> <span class="o">=</span> <span class="p">{</span>
                                    <span class="p">{</span><span class="sc">'2'</span><span class="p">,</span> <span class="s">"abc"</span><span class="p">},</span>
                                    <span class="p">{</span><span class="sc">'3'</span><span class="p">,</span> <span class="s">"def"</span><span class="p">},</span>
                                    <span class="p">{</span><span class="sc">'4'</span><span class="p">,</span> <span class="s">"ghi"</span><span class="p">},</span>
                                    <span class="p">{</span><span class="sc">'5'</span><span class="p">,</span> <span class="s">"jkl"</span><span class="p">},</span>
                                    <span class="p">{</span><span class="sc">'6'</span><span class="p">,</span> <span class="s">"mno"</span><span class="p">},</span>
                                    <span class="p">{</span><span class="sc">'7'</span><span class="p">,</span> <span class="s">"pqrs"</span><span class="p">},</span>
                                    <span class="p">{</span><span class="sc">'8'</span><span class="p">,</span> <span class="s">"tuv"</span><span class="p">},</span>
                                    <span class="p">{</span><span class="sc">'9'</span><span class="p">,</span> <span class="s">"wxyz"</span><span class="p">},</span>
                                 <span class="p">};</span>
    
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">letterCombinations</span><span class="p">(</span><span class="n">string</span> <span class="n">digits</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">solutions</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">digits</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">solutions</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="n">buff</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">digits</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
       
        <span class="n">f</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">digits</span><span class="p">,</span> <span class="n">solutions</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">solutions</span><span class="p">;</span>
    <span class="p">}</span>
    
    
    <span class="kr">inline</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">,</span> <span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">solutions</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">solutions</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="n">buff</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">buff</span><span class="p">.</span><span class="n">end</span><span class="p">()));</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">const</span> <span class="kt">char</span> <span class="n">d</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="n">c</span> <span class="o">:</span> <span class="n">mp</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">d</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">buff</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
            <span class="n">f</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">solutions</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><em>26‰∏™Â≠óÊØçÊØè‰∏™ÈÉΩÂÜô‰∫Ü‰∏ÄÈÅç‰πüÊòØÂ§üÁôΩÁó¥ÁöÑ..</em></p>

<p>ÂÖ∂ÂÆû‰∏≠Èó¥ÊàëËøòÂÜô‰∫Ü‰∏Ä‰∏™ÁâàÊú¨, ‰ΩÜÊòØÊïàÊûú‰∏ç‰Ω≥:<br />
<strong>1.5th Version:</strong></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">lst</span><span class="p">;</span>
    <span class="n">string</span><span class="o">*</span> <span class="n">ds</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">letterCombinations</span><span class="p">(</span><span class="n">string</span> <span class="n">digits</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">digits</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
            <span class="k">return</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">();</span>
        <span class="n">ds</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">digits</span><span class="p">;</span>
        <span class="n">string</span> <span class="n">tmp</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">lst</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">void</span> <span class="n">dfs</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">prefix</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pos</span> <span class="o">&gt;=</span> <span class="n">ds</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">this</span><span class="o">-&gt;</span><span class="n">lst</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">prefix</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">switch</span><span class="p">((</span><span class="o">*</span><span class="n">ds</span><span class="p">)[</span><span class="n">pos</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'a'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'b'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'c'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'d'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'e'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'f'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="mi">4</span><span class="p">:</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'g'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'h'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'i'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="mi">5</span><span class="p">:</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'j'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'k'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'l'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="mi">6</span><span class="p">:</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'m'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'n'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'o'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="mi">7</span><span class="p">:</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'p'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'q'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'r'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'s'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="mi">8</span><span class="p">:</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'t'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'u'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'v'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="mi">9</span><span class="p">:</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'w'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'x'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'y'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="n">prefix</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'z'</span><span class="p">);</span> <span class="n">dfs</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">prefix</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="nl">default:</span>
                    <span class="n">assert</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
:ET